// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users_provider.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUserWithProvider = `-- name: CreateUserWithProvider :one

INSERT INTO user_auth_provider (user_id, provider_user_id, provider)
VALUES($1, $2, $3) RETURNING user_id, provider_user_id, provider, created_at, updated_at
`

type CreateUserWithProviderParams struct {
	UserID         uuid.UUID
	ProviderUserID string
	Provider       AuthProvider
}

func (q *Queries) CreateUserWithProvider(ctx context.Context, arg CreateUserWithProviderParams) (UserAuthProvider, error) {
	row := q.db.QueryRowContext(ctx, createUserWithProvider, arg.UserID, arg.ProviderUserID, arg.Provider)
	var i UserAuthProvider
	err := row.Scan(
		&i.UserID,
		&i.ProviderUserID,
		&i.Provider,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByProvider = `-- name: GetUserByProvider :one
SELECT u.id, u.email, u.hashed_password, u.created_at, u.updated_at, u.role, u.name, u.email_verified 
FROM user_auth_provider up
JOIN users u on u.id = up.user_id
WHERE $1 = up.provider AND $2 = up.provider_user_id
`

type GetUserByProviderParams struct {
	Provider       AuthProvider
	ProviderUserID string
}

func (q *Queries) GetUserByProvider(ctx context.Context, arg GetUserByProviderParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByProvider, arg.Provider, arg.ProviderUserID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Role,
		&i.Name,
		&i.EmailVerified,
	)
	return i, err
}
