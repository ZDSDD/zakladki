// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type AuthProvider string

const (
	AuthProviderGoogle   AuthProvider = "google"
	AuthProviderFacebook AuthProvider = "facebook"
)

func (e *AuthProvider) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AuthProvider(s)
	case string:
		*e = AuthProvider(s)
	default:
		return fmt.Errorf("unsupported scan type for AuthProvider: %T", src)
	}
	return nil
}

type NullAuthProvider struct {
	AuthProvider AuthProvider
	Valid        bool // Valid is true if AuthProvider is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAuthProvider) Scan(value interface{}) error {
	if value == nil {
		ns.AuthProvider, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AuthProvider.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAuthProvider) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AuthProvider), nil
}

type Bookmark struct {
	ID              int32
	Name            string
	AvailableAmount int32
	Size            string
	Price           string
	Material        string
	CategoryID      int32
	Description     string
	ImageUrl        string
	CreatedAt       time.Time
	UpdatedAt       time.Time
	IsActive        bool
}

type BookmarkCategory struct {
	ID        int32
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
	IsActive  bool
}

type RefreshToken struct {
	Token     string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	ExpiresAt time.Time
	RevokedAt sql.NullTime
}

type User struct {
	ID             uuid.UUID
	Email          sql.NullString
	HashedPassword sql.NullString
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Role           int32
	Name           string
	EmailVerified  bool
}

type UserAuthProvider struct {
	UserID         uuid.UUID
	ProviderUserID string
	Provider       AuthProvider
	CreatedAt      time.Time
	UpdatedAt      time.Time
}
