// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: bookmarks.sql

package database

import (
	"context"
	"time"
)

const getActiveBookmarks = `-- name: GetActiveBookmarks :many
SELECT
    b.id,
    b.name,
    available_amount,
    size,
    price,
    material,
    c.name as category,
    b.description,
    image_url,
    b.created_at,
    b.updated_at,
    b.is_active
FROM
    bookmarks b
    JOIN bookmark_category c ON b.category_id = c.id
WHERE
    b.is_active = TRUE
ORDER BY
    b.created_at DESC
`

type GetActiveBookmarksRow struct {
	ID              int32
	Name            string
	AvailableAmount int32
	Size            string
	Price           string
	Material        string
	Category        string
	Description     string
	ImageUrl        string
	CreatedAt       time.Time
	UpdatedAt       time.Time
	IsActive        bool
}

func (q *Queries) GetActiveBookmarks(ctx context.Context) ([]GetActiveBookmarksRow, error) {
	rows, err := q.db.QueryContext(ctx, getActiveBookmarks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetActiveBookmarksRow
	for rows.Next() {
		var i GetActiveBookmarksRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AvailableAmount,
			&i.Size,
			&i.Price,
			&i.Material,
			&i.Category,
			&i.Description,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookmarkById = `-- name: GetBookmarkById :one
SELECT
    b.id,
    b.name,
    available_amount,
    size,
    price,
    material,
    c.name,
    description,
    image_url,
    b.created_at,
    b.updated_at,
    b.is_active
FROM
    bookmarks b
    JOIN bookmark_category c ON b.category_id = c.id
WHERE
    b.id = $1
`

type GetBookmarkByIdRow struct {
	ID              int32
	Name            string
	AvailableAmount int32
	Size            string
	Price           string
	Material        string
	Name_2          string
	Description     string
	ImageUrl        string
	CreatedAt       time.Time
	UpdatedAt       time.Time
	IsActive        bool
}

func (q *Queries) GetBookmarkById(ctx context.Context, id int32) (GetBookmarkByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getBookmarkById, id)
	var i GetBookmarkByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AvailableAmount,
		&i.Size,
		&i.Price,
		&i.Material,
		&i.Name_2,
		&i.Description,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsActive,
	)
	return i, err
}
